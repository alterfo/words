// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  angular.module('core').controller('TextController', [
    '$scope', '$http', '$stateParams', '$location', 'Authentication', '$document', "AlertService", 'moment', function($scope, $http, $stateParams, $location, Authentication, $document, AlertService, moment) {
      var DEBUG, cd, cm, cy, daysInMonth;
      DEBUG = 1;
      this.current_date = moment();
      cm = moment().month();
      cy = moment().year();
      cd = moment().date();
      this.curMonth = moment().format('YYYYMM');
      this.curDate = moment().format('YYYYMMDD');
      this.authentication = Authentication;
      this.historyText = '';
      this.text = '';
      this.changed = false;
      this.state = 'saved';
      daysInMonth = function(month, year) {
        return new Date(year, month + 1, 0).getDate();
      };
      this.nextMonth = (function(_this) {
        return function() {
          _this.curMonth = _this.date_to_show.nextMonth().yyyymm();
        };
      })(this);
      this.prevMonth = function() {
        this.curMonth = this.date_to_show.prevMonth().yyyymm();
      };
      this.getWordCounter = function() {
        if (this.text) {
          return this.text.trim().split(/\s+/).length;
        }
      };
      $document.bind("keydown", (function(_this) {
        return function(event) {
          if ((event.which === 115 || event.which === 83) && (event.ctrlKey || event.metaKey)) {
            _this.save('ctrls');
            event.stopPropagation();
            event.preventDefault();
            return false;
          }
          return true;
        };
      })(this));
      this.save = (function(_this) {
        return function(e) {
          if (_this.changed) {
            _this.state = 'saving';
            $http({
              method: 'POST',
              url: '/texts',
              data: {
                text: _this.text,
                date: _this.current_date,
                counter: _this.getWordCounter()
              }
            }).success(function(data, status, headers) {
              if (data.message) {
                AlertService.send("danger", data.message, 3000);
                return;
              }
              if (e === 'ctrls') {
                AlertService.send("success", "Продолжайте!", "Сохранение прошло успешно!", 2000);
              }
              _this.state = 'saved';
              _this.changed = false;
            }).error(function(data, status, headers) {
              if (e === 'ctrls') {
                AlertService.send("danger", "Упс!", "Сервер не доступен, продолжайте и попробуйте сохраниться через 5 минут!", 4000);
              }
            });
          } else {
            if (e === 'ctrls') {
              AlertService.send("success", "Продолжайте!", "Ничего не изменилось с прошлого сохранения!", 2000);
            }
          }
        };
      })(this);
      this.showText = (function(_this) {
        return function(date) {
          if (_this.current_date.setHours(0, 0, 0, 0) > (new Date(_this.curMonth + '-' + date)).setHours(0, 0, 0, 0)) {
            date = date + '';
            date = date.length === 2 ? date : '0' + date;
            _this.hideToday = true;
            _this.curDate = new Date(_this.curMonth + '-' + date);
            $http.get('/text/' + _this.curMonth + '-' + date).success(function(data, status, headers) {
              _this.historyText = data.text;
            });
          } else if (_this.current_date.setHours(0, 0, 0, 0) === (new Date(_this.curMonth + '-' + date)).setHours(0, 0, 0, 0)) {
            _this.hideToday = false;
            _this.historyText = '';
            _this.curDate = _this.current_date;
          } else {
            AlertService.send("info", "Машину времени пока изобретаем", "Давайте жить сегодняшним днем!", 3000);
            return;
          }
        };
      })(this);
      if (this.authentication.user) {
        AlertService.send("info", "С возвращением, " + this.authentication.user.displayName, "Давайте писать!", 3000);
      }
      $scope.$watch("text", function(newVal, oldVal) {
        this.changed = newVal !== oldVal && oldVal !== '';
        if (this.changed) {
          this.state = 'notsaved';
          this.days[cd - 1] = this.getWordCounter();
        }
      });
      $scope.$watch('curMonth', (function(_this) {
        return function() {
          var request_string;
          request_string = cy + "-" + ("0" + (cm + 1)).slice(-2);
          $http.get('/texts/' + request_string).success(function(data, status, headers) {
            var daysN, limit, ref;
            daysN = daysInMonth(cm, cy);
            _this.days = Array.apply(null, new Array(daysN)).map(Number.prototype.valueOf, 0);
            if (_this.isCurrentMonth) {
              limit = cd;
            }
            data.forEach(function(e, i) {
              _this.days[(new Date(e.date)).getDate() - 1] = e.counter;
            });
            if (limit) {
              [].splice.apply(_this.days, [limit, daysN - limit + 1].concat(ref = Array.apply(null, new Array(daysN - limit)).map(String.prototype.valueOf, "--"))), ref;
            }
          });
        };
      })(this));
      $http({
        method: 'GET',
        url: '/today'
      }).success((function(_this) {
        return function(data, status, headers) {
          _this.text = data.text;
          _this.state = 'saved';
          setInterval(_this.save, 10000);
        };
      })(this)).error(function(data, status, headers) {});
    }
  ]);

}).call(this);

//# sourceMappingURL=text.client.controller.js.map
