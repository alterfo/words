// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('users').factory('AuthService', [
    '$q', '$timeout', '$http', '$window', function($q, $timeout, $http, $window) {
      var getPayload, getToken, getUser, getUserFromToken, isLoggedIn, login, logout, register, removeToken, saveToken, setUser;
      $window.user = null;
      getPayload = function(token) {
        return JSON.parse($window.atob(token.split('.')[1]));
      };
      saveToken = function(token) {
        return $window.localStorage['token'] = token;
      };
      getToken = function() {
        return $window.localStorage['token'];
      };
      removeToken = function() {
        return delete $window.localStorage['token'];
      };
      isLoggedIn = function() {
        var payload, token;
        token = this.getToken();
        if (token) {
          payload = getPayload(token);
          return new Date(payload.loginExpires) > Date.now();
        } else {
          return false;
        }
      };
      getUserFromToken = function() {
        var payload, token;
        if (this.isLoggedIn()) {
          token = this.getToken();
          payload = getPayload(token);
          return payload.username;
        }
      };
      getUser = function() {
        if (this.isLoggedIn()) {
          return $window.user;
        }
      };
      setUser = function(user) {
        return $window.user = user;
      };
      login = function(credentials) {
        var deferred;
        deferred = $q.defer();
        $http.post('/auth/signin', credentials).success((function(_this) {
          return function(data, status) {
            if (status === 200 && data.loginToken) {
              $window.user = data;
              _this.saveToken(data.loginToken);
              deferred.resolve();
            } else {
              $window.user = false;
              _this.removeToken();
              deferred.reject(data);
            }
          };
        })(this)).error((function(_this) {
          return function(data) {
            $window.user = false;
            _this.removeToken();
            deferred.reject(data);
          };
        })(this));
        return deferred.promise;
      };
      logout = function() {
        var deferred;
        deferred = $q.defer();
        $http.get('/auth/signout').success((function(_this) {
          return function(data) {
            $window.user = false;
            _this.removeToken();
            return deferred.resolve();
          };
        })(this)).error(function(data) {
          $window.user = false;
          this.removeToken();
          return deferred.reject();
        });
        return deferred.promise;
      };
      register = function(credentials) {
        var deferred;
        deferred = $q.defer();
        $http.post('/auth/signup', credentials).success((function(_this) {
          return function(data, status) {
            if (status === 200 && data.loginToken) {
              _this.saveToken(data.loginToken);
              deferred.resolve();
            } else {
              deferred.reject();
            }
          };
        })(this)).error(function(data) {
          return deferred.reject(data);
        });
        return deferred.promise;
      };
      return {
        isLoggedIn: isLoggedIn,
        getUser: getUser,
        login: login,
        logout: logout,
        register: register,
        saveToken: saveToken,
        getToken: getToken,
        getUserFromToken: getUserFromToken,
        removeToken: removeToken
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=auth.client.service.js.map
