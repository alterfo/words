'use strict';

// Init the application configuration module for AngularJS application
var ApplicationConfiguration = (function() {
	// Init module configuration options
	var applicationModuleName = 'mean';
	var applicationModuleVendorDependencies = ['ngResource', 'ngCookies',  'ngAnimate',  'ngTouch',  'ngSanitize',  'ui.router', 'ui.bootstrap', 'ui.utils'];

	// Add a new vertical module
	var registerModule = function(moduleName, dependencies) {
		// Create angular module
		angular.module(moduleName, dependencies || []);

		// Add the module to the AngularJS configuration file
		angular.module(applicationModuleName).requires.push(moduleName);
	};

	return {
		applicationModuleName: applicationModuleName,
		applicationModuleVendorDependencies: applicationModuleVendorDependencies,
		registerModule: registerModule
	};
})();
'use strict';

//Start by defining the main module and adding the module dependencies
angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies);

// Setting HTML5 Location Mode
angular.module(ApplicationConfiguration.applicationModuleName).config(['$locationProvider',
	function($locationProvider) {
		$locationProvider.hashPrefix('!');
	}
]);

//Then define the init function for starting up the application
angular.element(document).ready(function() {
	//Fixing facebook bug with redirect
	if (window.location.hash === '#_=_') window.location.hash = '#!';

	//Then init the app
	angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]);
});
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('core');
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('users');
'use strict';

// Setting up route
angular.module('core').config(['$stateProvider', '$urlRouterProvider',
	function($stateProvider, $urlRouterProvider) {
		// Redirect to home view when route not found
		$urlRouterProvider.otherwise('/');

		// Home state routing
		$stateProvider.
		state('home', {
			url: '/',
			templateUrl: 'modules/core/views/home.client.view.html'
		});
	}
]);
"use strict";
angular.module("core").controller("HeaderController", [
  "$scope", "Authentication", "Menus", function($scope, Authentication, Menus) {
    $scope.authentication = Authentication;
    $scope.isCollapsed = false;
    $scope.menu = Menus.getMenu("topbar");
    $scope.toggleCollapsibleMenu = function() {
      $scope.isCollapsed = !$scope.isCollapsed;
    };
    return $scope.$on("$stateChangeSuccess", function() {
      $scope.isCollapsed = false;
    });
  }
]);

// Generated by CoffeeScript 1.8.0
'use strict';
angular.module('core').controller('TextController', [
  '$scope', '$http', '$stateParams', '$location', 'Authentication', '$document', "AlertService", function($scope, $http, $stateParams, $location, Authentication, $document, AlertService) {
    var DEBUG, cd, cm, cy, daysInMonth;
    DEBUG = 1;
    $scope.current_date = new Date();
    cm = $scope.current_date.getMonth();
    cy = $scope.current_date.getFullYear();
    cd = $scope.current_date.getDate();
    $scope.date_to_show = new Date($scope.current_date);
    $scope.month_to_show = $scope.date_to_show.getFullYear() + '' + $scope.date_to_show.getMonth();
    $scope.curMonth = $scope.date_to_show.yyyymm();
    $scope.curDate = $scope.date_to_show.yyyymmdd();
    $scope.authentication = Authentication;
    $scope.historyText = '';
    $scope.text = '';
    $scope.changed = false;
    $scope.state = 'saved';
    daysInMonth = function(month, year) {
      return new Date(year, month + 1, 0).getDate();
    };
    $scope.nextMonth = function() {
      $scope.curMonth = $scope.date_to_show.nextMonth().yyyymm();
    };
    $scope.prevMonth = function() {
      $scope.curMonth = $scope.date_to_show.prevMonth().yyyymm();
    };
    $scope.getWordCounter = function() {
      if ($scope.text) {
        return $scope.text.trim().split(/\s+/).length;
      }
    };
    $document.bind("keydown", function(event) {
      if ((event.which === 115 || event.which === 83) && (event.ctrlKey || event.metaKey)) {
        $scope.save('ctrls');
        event.stopPropagation();
        event.preventDefault();
        return false;
      }
      return true;
    });
    $scope.save = function(e) {
      if ($scope.changed) {
        $scope.state = 'saving';
        $http({
          method: 'POST',
          url: '/texts',
          data: {
            text: $scope.text,
            date: $scope.current_date,
            counter: $scope.getWordCounter()
          }
        }).success(function(data, status, headers) {
          if (data.message) {
            AlertService.send("danger", message, 3000);
            return;
          }
          if (e === 'ctrls') {
            AlertService.send("success", "Продолжайте!", "Сохранение прошло успешно!", 2000);
          }
          $scope.state = 'saved';
          $scope.changed = false;
        }).error(function(data, status, headers) {
          if (e === 'ctrls') {
            AlertService.send("danger", "Упс!", "Сервер не доступен, продолжайте и попробуйте сохраниться через 5 минут!", 4000);
          }
        })["finally"](function(data, status, headers) {});
      } else {
        if (e === 'ctrls') {
          AlertService.send("success", "Продолжайте!", "Ничего не изменилось с прошлого сохранения!", 2000);
        }
      }
    };
    $scope.showText = function(date) {
      if ($scope.current_date.setHours(0, 0, 0, 0) > (new Date($scope.curMonth + '-' + date)).setHours(0, 0, 0, 0)) {
        date = date + '';
        date = date.length === 2 ? date : '0' + date;
        $scope.hideToday = true;
        $scope.curDate = new Date($scope.curMonth + '-' + date);
        $http.get('/text/' + $scope.curMonth + '-' + date).success(function(data, status, headers) {
          $scope.historyText = data.text;
        });
      } else if ($scope.current_date.setHours(0, 0, 0, 0) === (new Date($scope.curMonth + '-' + date)).setHours(0, 0, 0, 0)) {
        $scope.hideToday = false;
        $scope.historyText = '';
      } else {
        AlertService.send("info", "Машину времени пока изобретаем", "Давайте жить сегодняшним днем!", 3000);
        return;
      }
    };
    if ($scope.authentication.user) {
      AlertService.send("info", "С возвращением, " + $scope.authentication.user.displayName, "Давайте писать!", 3000);
    }
    $scope.$watch("text", function(newVal, oldVal) {
      $scope.changed = newVal !== oldVal && oldVal !== '';
      if ($scope.changed) {
        $scope.state = 'notsaved';
        $scope.days[cd - 1] = $scope.getWordCounter();
      }
    });
    $scope.$watch('curMonth', function() {
      var request_string, sd, sm, sy;
      sm = $scope.date_to_show.getMonth();
      sy = $scope.date_to_show.getFullYear();
      sd = $scope.date_to_show.getDate();
      request_string = sy + "-" + ("0" + (sm + 1)).slice(-2);
      $scope.isCurrentMonth = sm === cm && sy === cy;
      $http.get('/texts/' + request_string).success(function(data, status, headers) {
        var daysN, limit, _ref;
        daysN = daysInMonth(sm, sy);
        $scope.days = Array.apply(null, new Array(daysN)).map(Number.prototype.valueOf, 0);
        if ($scope.isCurrentMonth) {
          limit = cd;
        }
        data.forEach(function(e, i) {
          $scope.days[(new Date(e.date)).getDate() - 1] = e.counter;
        });
        if (limit) {
          [].splice.apply($scope.days, [limit, daysN - limit + 1].concat(_ref = Array.apply(null, new Array(daysN - limit)).map(String.prototype.valueOf, "--"))), _ref;
        }
      });
    });
    $http({
      method: 'GET',
      url: '/today'
    }).success(function(data, status, headers) {
      $scope.text = data.text;
      $scope.state = 'saved';
      setInterval($scope.save, 10000);
    }).error(function(data, status, headers) {});
  }
]);

// Generated by CoffeeScript 1.9.0
'use strict';
angular.module('core').directive('callbackform', [
  function() {
    return {
      templateUrl: 'modules/core/views/callbackform.client.view.html',
      restrict: 'E',
      link: function(scope, element, attrs) {
        element.on('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
        });
      }
    };
  }
]);

// Generated by CoffeeScript 1.9.0
'use strict';
angular.module('core').directive('text', [
  function() {
    return {
      templateUrl: 'modules/core/views/text.client.view.html',
      restrict: 'E',
      link: function(scope, element, attrs) {}
    };
  }
]);

// Generated by CoffeeScript 1.8.0
'use strict';
angular.module('core').directive('timeline', [
  function() {
    return {
      templateUrl: 'modules/core/views/timeline.client.view.html',
      restrict: 'E',
      link: function(scope, element, attrs) {}
    };
  }
]);

// Generated by CoffeeScript 1.9.0
'use strict';
Date.prototype.yyyymm = function() {
  var mm, yyyy;
  yyyy = this.getFullYear().toString();
  mm = (this.getMonth() + 1).toString();
  return yyyy + '-' + (mm.length === 2 ? mm : "0" + mm);
};

Date.prototype.yyyymmdd = function() {
  var dd, mm, yyyy;
  yyyy = this.getFullYear().toString();
  mm = (this.getMonth() + 1).toString();
  dd = this.getDate().toString();
  return yyyy + '-' + (mm.length === 2 ? mm : "0" + mm) + '-' + (dd.length === 2 ? dd : "0" + dd);
};

Date.prototype.nextMonth = function() {
  return new Date(this.setMonth(this.getMonth() + 1));
};

Date.prototype.prevMonth = function() {
  return new Date(this.setMonth(this.getMonth() - 1));
};

// Generated by CoffeeScript 1.9.0
'use strict';
angular.module('core').factory("AlertService", [
  "$timeout", "$rootScope", function($timeout, $rootScope) {
    var AlertService;
    AlertService = {};
    $rootScope.alerts = [];
    AlertService.send = function(type, title, msg, timeout) {
      $rootScope.alerts.push({
        type: type,
        title: title,
        msg: msg,
        close: function() {
          return AlertService.closeAlert(this);
        }
      });
      if (typeof timeout === "undefined") {
        timeout = 7000;
      }
      if (timeout) {
        $timeout(function() {
          AlertService.closeAlert(this);
        }, timeout);
      }
    };
    AlertService.closeAlert = function(alert) {
      return this.closeAlertIdx($rootScope.alerts.indexOf(alert));
    };
    AlertService.closeAlertIdx = function(index) {
      return $rootScope.alerts.splice(index, 1);
    };
    return AlertService;
  }
]);

'use strict';

//Menu service used for managing  menus
angular.module('core').service('Menus', [

	function() {
		// Define a set of default roles
		this.defaultRoles = ['*'];

		// Define the menus object
		this.menus = {};

		// A private function for rendering decision 
		var shouldRender = function(user) {
			if (user) {
				if (!!~this.roles.indexOf('*')) {
					return true;
				} else {
					for (var userRoleIndex in user.roles) {
						for (var roleIndex in this.roles) {
							if (this.roles[roleIndex] === user.roles[userRoleIndex]) {
								return true;
							}
						}
					}
				}
			} else {
				return this.isPublic;
			}

			return false;
		};

		// Validate menu existance
		this.validateMenuExistance = function(menuId) {
			if (menuId && menuId.length) {
				if (this.menus[menuId]) {
					return true;
				} else {
					throw new Error('Menu does not exists');
				}
			} else {
				throw new Error('MenuId was not provided');
			}

			return false;
		};

		// Get the menu object by menu id
		this.getMenu = function(menuId) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Return the menu object
			return this.menus[menuId];
		};

		// Add new menu object by menu id
		this.addMenu = function(menuId, isPublic, roles) {
			// Create the new menu
			this.menus[menuId] = {
				isPublic: isPublic || false,
				roles: roles || this.defaultRoles,
				items: [],
				shouldRender: shouldRender
			};

			// Return the menu object
			return this.menus[menuId];
		};

		// Remove existing menu object by menu id
		this.removeMenu = function(menuId) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Return the menu object
			delete this.menus[menuId];
		};

		// Add menu item object
		this.addMenuItem = function(menuId, menuItemTitle, menuItemURL, menuItemType, menuItemUIRoute, isPublic, roles, position) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Push new menu item
			this.menus[menuId].items.push({
				title: menuItemTitle,
				link: menuItemURL,
				menuItemType: menuItemType || 'item',
				menuItemClass: menuItemType,
				uiRoute: menuItemUIRoute || ('/' + menuItemURL),
				isPublic: ((isPublic === null || typeof isPublic === 'undefined') ? this.menus[menuId].isPublic : isPublic),
				roles: ((roles === null || typeof roles === 'undefined') ? this.menus[menuId].roles : roles),
				position: position || 0,
				items: [],
				shouldRender: shouldRender
			});

			// Return the menu object
			return this.menus[menuId];
		};

		// Add submenu item object
		this.addSubMenuItem = function(menuId, rootMenuItemURL, menuItemTitle, menuItemURL, menuItemUIRoute, isPublic, roles, position) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Search for menu item
			for (var itemIndex in this.menus[menuId].items) {
				if (this.menus[menuId].items[itemIndex].link === rootMenuItemURL) {
					// Push new submenu item
					this.menus[menuId].items[itemIndex].items.push({
						title: menuItemTitle,
						link: menuItemURL,
						uiRoute: menuItemUIRoute || ('/' + menuItemURL),
						isPublic: ((isPublic === null || typeof isPublic === 'undefined') ? this.menus[menuId].items[itemIndex].isPublic : isPublic),
						roles: ((roles === null || typeof roles === 'undefined') ? this.menus[menuId].items[itemIndex].roles : roles),
						position: position || 0,
						shouldRender: shouldRender
					});
				}
			}

			// Return the menu object
			return this.menus[menuId];
		};

		// Remove existing menu object by menu id
		this.removeMenuItem = function(menuId, menuItemURL) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Search for menu item to remove
			for (var itemIndex in this.menus[menuId].items) {
				if (this.menus[menuId].items[itemIndex].link === menuItemURL) {
					this.menus[menuId].items.splice(itemIndex, 1);
				}
			}

			// Return the menu object
			return this.menus[menuId];
		};

		// Remove existing menu object by menu id
		this.removeSubMenuItem = function(menuId, submenuItemURL) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Search for menu item to remove
			for (var itemIndex in this.menus[menuId].items) {
				for (var subitemIndex in this.menus[menuId].items[itemIndex].items) {
					if (this.menus[menuId].items[itemIndex].items[subitemIndex].link === submenuItemURL) {
						this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1);
					}
				}
			}

			// Return the menu object
			return this.menus[menuId];
		};

		//Adding the topbar menu
		this.addMenu('topbar');
	}
]);
'use strict';

// Config HTTP Error Handling
angular.module('users').config(['$httpProvider',
	function($httpProvider) {
		// Set the httpProvider "not authorized" interceptor
		$httpProvider.interceptors.push(['$q', '$location', 'Authentication',
			function($q, $location, Authentication) {
				return {
					responseError: function(rejection) {
						switch (rejection.status) {
							case 401:
								// Deauthenticate the global user
								Authentication.user = null;

								// Redirect to signin page
								$location.path('signin');
								break;
							case 403:
								// Add unauthorized behaviour 
								break;
						}

						return $q.reject(rejection);
					}
				};
			}
		]);
	}
]);
'use strict';

// Setting up route
angular.module('users').config(['$stateProvider',
	function($stateProvider) {
		// Users state routing
		$stateProvider.
		state('profile', {
			url: '/settings/profile',
			templateUrl: 'modules/users/views/settings/edit-profile.client.view.html'
		}).
		state('password', {
			url: '/settings/password',
			templateUrl: 'modules/users/views/settings/change-password.client.view.html'
		}).
		state('accounts', {
			url: '/settings/accounts',
			templateUrl: 'modules/users/views/settings/social-accounts.client.view.html'
		}).
		state('signup', {
			url: '/signup',
			templateUrl: 'modules/users/views/authentication/signup.client.view.html'
		}).
		state('signin', {
			url: '/signin',
			templateUrl: 'modules/users/views/authentication/signin.client.view.html'
		}).
		state('forgot', {
			url: '/password/forgot',
			templateUrl: 'modules/users/views/password/forgot-password.client.view.html'
		}).
		state('reset-invalid', {
			url: '/password/reset/invalid',
			templateUrl: 'modules/users/views/password/reset-password-invalid.client.view.html'
		}).
		state('reset-success', {
			url: '/password/reset/success',
			templateUrl: 'modules/users/views/password/reset-password-success.client.view.html'
		}).
		state('reset', {
			url: '/password/reset/:token',
			templateUrl: 'modules/users/views/password/reset-password.client.view.html'
		});
	}
]);
'use strict';

angular.module('users').controller('AuthenticationController', ['$scope', '$http', '$location', 'Authentication',
	function($scope, $http, $location, Authentication) {
		$scope.authentication = Authentication;

		// If user is signed in then redirect back home
		if ($scope.authentication.user) $location.path('/');

		$scope.signup = function() {
			$http.post('/auth/signup', $scope.credentials).success(function(response) {
				// If successful we assign the response to the global user model
				$scope.authentication.user = response;

				// And redirect to the index page
				$location.path('/');
			}).error(function(response) {
				$scope.error = response.message;
			});
		};

		$scope.signin = function() {
			$http.post('/auth/signin', $scope.credentials).success(function(response) {
				// If successful we assign the response to the global user model
				$scope.authentication.user = response;

				// And redirect to the index page
				$location.path('/');
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);
'use strict';

angular.module('users').controller('PasswordController', ['$scope', '$stateParams', '$http', '$location', 'Authentication',
	function($scope, $stateParams, $http, $location, Authentication) {
		$scope.authentication = Authentication;

		//If user is signed in then redirect back home
		if ($scope.authentication.user) $location.path('/');

		// Submit forgotten password account id
		$scope.askForPasswordReset = function() {
			$scope.success = $scope.error = null;

			$http.post('/auth/forgot', $scope.credentials).success(function(response) {
				// Show user success message and clear form
				$scope.credentials = null;
				$scope.success = response.message;

			}).error(function(response) {
				// Show user error message and clear form
				$scope.credentials = null;
				$scope.error = response.message;
			});
		};

		// Change user password
		$scope.resetUserPassword = function() {
			$scope.success = $scope.error = null;

			$http.post('/auth/reset/' + $stateParams.token, $scope.passwordDetails).success(function(response) {
				// If successful show success message and clear form
				$scope.passwordDetails = null;

				// Attach user profile
				Authentication.user = response;

				// And redirect to the index page
				$location.path('/password/reset/success');
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);
'use strict';

angular.module('users').controller('SettingsController', ['$scope', '$http', '$location', 'Users', 'Authentication',
	function($scope, $http, $location, Users, Authentication) {
		$scope.user = Authentication.user;

		// If user is not signed in then redirect back home
		if (!$scope.user) $location.path('/');

		// Check if there are additional accounts 
		$scope.hasConnectedAdditionalSocialAccounts = function(provider) {
			for (var i in $scope.user.additionalProvidersData) {
				return true;
			}

			return false;
		};

		// Check if provider is already in use with current user
		$scope.isConnectedSocialAccount = function(provider) {
			return $scope.user.provider === provider || ($scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider]);
		};

		// Remove a user social account
		$scope.removeUserSocialAccount = function(provider) {
			$scope.success = $scope.error = null;

			$http.delete('/users/accounts', {
				params: {
					provider: provider
				}
			}).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.user = Authentication.user = response;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};

		// Update a user profile
		$scope.updateUserProfile = function(isValid) {
			if (isValid) {
				$scope.success = $scope.error = null;
				var user = new Users($scope.user);

				user.$update(function(response) {
					$scope.success = true;
					Authentication.user = response;
				}, function(response) {
					$scope.error = response.data.message;
				});
			} else {
				$scope.submitted = true;
			}
		};

		// Change user password
		$scope.changeUserPassword = function() {
			$scope.success = $scope.error = null;

			$http.post('/users/password', $scope.passwordDetails).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.passwordDetails = null;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);
'use strict';

// Authentication service for user variables
angular.module('users').factory('Authentication', [
	function() {
		var _this = this;

		_this._data = {
			user: window.user
		};

		return _this._data;
	}
]);
'use strict';

// Users service used for communicating with the users REST endpoint
angular.module('users').factory('Users', ['$resource',
	function($resource) {
		return $resource('users', {}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);