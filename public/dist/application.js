(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

//Start by defining the main module and adding the module dependencies
angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies);

// Setting HTML5 Location Mode
angular.module(ApplicationConfiguration.applicationModuleName).config(['$locationProvider',
	function($locationProvider) {
		$locationProvider.hashPrefix('!');
	}
]);

//Then define the init function for starting up the application
angular.element(document).ready(function() {
	//Fixing facebook bug with redirect
	if (window.location.hash === '#_=_') window.location.hash = '#!';

	//Then init the app
	angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]);
});
},{}],2:[function(require,module,exports){
'use strict';

// Init the application configuration module for AngularJS application
var ApplicationConfiguration = (function() {
	// Init module configuration options
	var applicationModuleName = 'mean';
	var applicationModuleVendorDependencies = ['ngResource', 'ngCookies',  'ngAnimate',  'ngTouch',  'ngSanitize',  'ui.router', 'ui.bootstrap', 'ui.utils', 'cfp.hotkeys'];

	// Add a new vertical module
	var registerModule = function(moduleName, dependencies) {
		// Create angular module
		angular.module(moduleName, dependencies || []);

		// Add the module to the AngularJS configuration file
		angular.module(applicationModuleName).requires.push(moduleName);
	};

	return {
		applicationModuleName: applicationModuleName,
		applicationModuleVendorDependencies: applicationModuleVendorDependencies,
		registerModule: registerModule
	};
})();

},{}],3:[function(require,module,exports){
'use strict';

// Setting up route
angular.module('core').config(['$stateProvider', '$urlRouterProvider',
	function($stateProvider, $urlRouterProvider) {
		// Redirect to home view when route not found
		$urlRouterProvider.otherwise('/');

		// Home state routing
		$stateProvider
            .state('home', {
                url: '/?date',
                templateUrl: 'modules/core/views/home.client.view.html'
            })
            .state('about', {
                url: '/about',
                templateUrl: 'modules/core/views/about.client.view.html'
            });

	}
]);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  angular.module("core").controller("HeaderController", [
    '$scope', "Authentication", "Menus", function($scope, Authentication, Menus) {
      $scope.authentication = Authentication;
      $scope.isCollapsed = false;
      $scope.menu = Menus.getMenu("topbar");
      $scope.toggleCollapsibleMenu = function() {
        $scope.isCollapsed = !$scope.isCollapsed;
      };
      return $scope.$on("$stateChangeSuccess", function() {
        $scope.isCollapsed = false;
      });
    }
  ]);

}).call(this);



},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('core').controller('TextController', [
    '$scope', '$http', '$stateParams', '$location', 'Authentication', '$document', "AlertService", 'WebApiService', 'TimelineService', 'hotkeys', function($scope, $http, $stateParams, $location, Authentication, $document, AlertService, WebApiService, TimelineService, hotkeys) {
      $scope.authentication = Authentication;
      $scope.insertText = function(day) {
        if (!day) {
          return WebApiService.getToday().then(function(data) {
            $scope.text = data.text;
            $scope.state = 'saved';
            setInterval($scope.save, 10000);
          }, function(err) {});
        }
      };
      $scope.text = '';
      $scope.getWordCounter = function() {
        if ($scope.text) {
          return $scope.text.trim().split(/\s+/).length;
        }
      };
      $scope.changed = false;
      $scope.$watch("text", function(newVal, oldVal) {
        $scope.changed = newVal !== oldVal && oldVal !== '';
        if ($scope.changed) {
          $scope.state = 'notsaved';
          TimelineService.setCounterValue($scope.getWordCounter());
        }
      });
      $scope.historyText = '';
      $scope.state = 'saved';
      hotkeys.add({
        combo: 'ctrl+s',
        description: 'Save',
        callback: function(e) {
          e.preventDefault();
          e.stopPropagation();
          return $scope.save();
        }
      });
      $scope.save = function(e) {
        if ($scope.changed) {
          $scope.state = 'saving';
          WebApiService.postText($scope.text).then(function(data) {
            if (data.data.message) {
              AlertService.send("danger", data.message, 3000);
            } else {
              if (e === 'ctrls') {
                AlertService.send("success", "Продолжайте!", "Сохранение прошло успешно!", 2000);
              }
              $scope.state = 'saved';
              return $scope.changed = false;
            }
          }, function(err) {
            if (e === 'ctrls') {
              return AlertService.send("danger", "Упс!", "Сервер не доступен, продолжайте и попробуйте сохраниться через 5 минут!", 4000);
            }
          });
        } else {
          if (e === 'ctrls') {
            AlertService.send("success", "Продолжайте!", "Ничего не изменилось с прошлого сохранения!", 2000);
          }
        }
      };
      $scope.showText = function(date) {
        if ($scope.current_date.setHours(0, 0, 0, 0) > (new Date($scope.curMonth + '-' + date)).setHours(0, 0, 0, 0)) {
          date = date + '';
          date = date.length === 2 ? date : '0' + date;
          $scope.hideToday = true;
          $scope.curDate = new Date($scope.curMonth + '-' + date);
          $http.get('/text/' + $scope.curMonth + '-' + date).success(function(data, status, headers) {
            $scope.historyText = data.text;
          });
        } else if ($scope.current_date.setHours(0, 0, 0, 0) === (new Date($scope.curMonth + '-' + date)).setHours(0, 0, 0, 0)) {
          $scope.hideToday = false;
          $scope.historyText = '';
          $scope.curDate = $scope.current_date;
        } else {
          AlertService.send("info", "Машину времени пока изобретаем", "Давайте жить сегодняшним днем!", 3000);
          return;
        }
      };
    }
  ]);

}).call(this);



},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('core').controller('TimelineController', [
    '$scope', 'TimelineService', '$stateParams', '$locale', function($scope, TimelineService, $stateParams, $locale) {
      var dateString, working_date;
      dateString = $stateParams.date || (new Date()).yyyymm();
      working_date = dateString ? dateString.yyyymmToDate() : new Date();
      $scope.languageMonth = $locale.DATETIME_FORMATS.STANDALONEMONTH[+working_date.getMonth()];
      $scope.days = TimelineService.getTimeline(dateString);
      $scope.prevmonth = working_date.prevMonth().yyyymm();
      if (working_date.nextMonth().isLessThenCurrentMonth()) {
        return $scope.nextmonth = working_date.nextMonth().yyyymm();
      }
    }
  ]);

}).call(this);



},{}],7:[function(require,module,exports){
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('core');
},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('core').directive('alerts', [
    function() {
      return {
        templateUrl: 'modules/core/views/alerts.client.view.html',
        restrict: 'E'
      };
    }
  ]);

}).call(this);



},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('core').directive('authHide', [
    'Authentication', function(Authentication) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs) {
          scope.authentication = Authentication;
          return scope.$watch(scope.authentication, function(value, oldValue) {
            if (scope.authentication.user) {
              return element.addClass('ng-hide');
            } else {
              return element.removeClass('ng-hide');
            }
          });
        }
      };
    }
  ]).directive('authShow', [
    'Authentication', function(Authentication) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs) {
          scope.authentication = Authentication;
          return scope.$watch(scope.authentication, function(value, oldValue) {
            if (scope.authentication.user) {
              return element.removeClass('ng-hide');
            } else {
              return element.addClass('ng-hide');
            }
          });
        }
      };
    }
  ]);

}).call(this);



},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('core').directive('callbackform', [
    function() {
      return {
        templateUrl: 'modules/core/views/callbackform.client.view.html',
        restrict: 'E',
        scope: {},
        link: function(scope, element, attrs) {
          return element.on('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
          });
        }
      };
    }
  ]);

}).call(this);



},{}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('core').directive('sooHeader', [
    function() {
      return {
        templateUrl: 'modules/core/views/header.client.view.html',
        restrict: 'E',
        controller: 'HeaderController',
        scope: {}
      };
    }
  ]);

}).call(this);



},{}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('core').directive('sooText', [
    'TimelineService', 'AlertService', function(TimelineService, AlertService) {
      return {
        templateUrl: 'modules/core/views/text.client.view.html',
        restrict: 'E',
        controller: 'TextController',
        scope: {
          textDate: '='
        },
        link: function(s, e, a) {
          s.insertText(TimelineService.getDay());
          if (s.authentication.user) {
            AlertService.send("info", "С возвращением, " + s.authentication.user.displayName, "Давайте писать!", 3000);
          }
        }
      };
    }
  ]);

}).call(this);



},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('core').directive('timeline', [
    function() {
      return {
        templateUrl: 'modules/core/views/timeline.client.view.html',
        restrict: 'E',
        scope: {},
        controller: 'TimelineController'
      };
    }
  ]);

}).call(this);



},{}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {


}).call(this);



},{}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  Date.prototype.yyyymm = function() {
    var mm, yyyy;
    yyyy = this.getFullYear().toString();
    mm = (this.getMonth() + 1).toString();
    return yyyy + '-' + (mm.length === 2 ? mm : "0" + mm);
  };

  Date.prototype.yyyymmdd = function() {
    var dd, mm, yyyy;
    yyyy = this.getFullYear().toString();
    mm = (this.getMonth() + 1).toString();
    dd = this.getDate().toString();
    return yyyy + '-' + (mm.length === 2 ? mm : "0" + mm) + '-' + (dd.length === 2 ? dd : "0" + dd);
  };

  Date.prototype.nextMonth = function() {
    return new Date(this.setMonth(this.getMonth() + 1));
  };

  Date.prototype.prevMonth = function() {
    return new Date(this.setMonth(this.getMonth() - 1));
  };

  String.prototype.yyyymmToDate = function() {
    return new Date(this.slice(0, 4), +this.slice(5, 7) - 1);
  };

  Date.prototype.isCurrentMonth = function() {
    var dm, dy, tm, today, ty, working_date;
    working_date = this;
    today = new Date();
    ty = today.getFullYear();
    dy = working_date.getFullYear();
    tm = today.getMonth();
    dm = working_date.getMonth();
    return tm === dm && ty === dy;
  };

  Date.prototype.daysInMonth = function() {
    return new Date(this.getFullYear(), this.getMonth() + 1, 0).getDate();
  };

  Date.prototype.isLessThenCurrentMonth = function() {
    var today;
    today = new Date();
    today.setMonth(today.getMonth() - 1);
    return Date.parse(today) > Date.parse(this);
  };

}).call(this);



},{}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('core').factory("WebApiService", [
    '$http', function($http) {
      var WebApiService;
      return new (WebApiService = (function() {
        function WebApiService() {
          return;
        }

        WebApiService.prototype.getToday = function() {
          return $http.get('/today');
        };

        WebApiService.prototype.getTimeline = function(dateString) {
          var days, daysN, today, working_date;
          working_date = dateString.yyyymmToDate();
          today = new Date();
          daysN = working_date.daysInMonth();
          days = (function() {
            var i, ref, results;
            results = [];
            for (i = 1, ref = daysN; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
              results.push('--');
            }
            return results;
          })();
          $http.get('/texts/' + dateString).then(function(data) {
            var limit, ref;
            if (working_date.isCurrentMonth()) {
              limit = today.getDate();
            }
            if (working_date.isLessThenCurrentMonth()) {
              limit = daysN;
            }
            data.data.forEach(function(e) {
              days[(new Date(e.date)).getDate() - 1] = e.counter;
            });
            if (limit) {
              [].splice.apply(days, [0, limit - 0 + 1].concat(ref = (function() {
                var i, ref1, results;
                results = [];
                for (i = 1, ref1 = limit; 1 <= ref1 ? i <= ref1 : i >= ref1; 1 <= ref1 ? i++ : i--) {
                  results.push(0);
                }
                return results;
              })())), ref;
            }
          });
          return days;
        };

        WebApiService.prototype.postText = function(textString) {
          return $http.post('/texts', {
            data: {
              text: textString,
              date: Date.now(),
              counter: textString.trim().split(/\s+/).length
            }
          });
        };

        return WebApiService;

      })());
    }
  ]);

}).call(this);



},{}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('core').factory("AlertService", [
    "$timeout", "$rootScope", function($timeout, $rootScope) {
      var AlertService;
      return new (AlertService = (function() {
        function AlertService() {
          $rootScope.alerts = [];
          return;
        }

        AlertService.prototype.send = function(type, title, msg, timeout) {
          $rootScope.alerts.push({
            type: type,
            title: title,
            msg: msg,
            close: (function(_this) {
              return function() {
                return _this.closeAlert(_this);
              };
            })(this)
          });
          if (typeof timeout === "undefined") {
            timeout = 7000;
          }
          if (timeout) {
            $timeout((function(_this) {
              return function() {
                _this.closeAlert(_this);
              };
            })(this), timeout);
          }
        };

        AlertService.prototype.closeAlert = function(alert) {
          return this.closeAlertIdx($rootScope.alerts.indexOf(alert));
        };

        AlertService.prototype.closeAlertIdx = function(index) {
          return $rootScope.alerts.splice(index, 1);
        };

        return AlertService;

      })());
    }
  ]);

}).call(this);



},{}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
angular.module('core').factory("DateService", [
  function() {
    var date_to_show, today;
    today = new Date();
    date_to_show = new Date();
    return {
      getTodayISO: function() {
        return today;
      },
      getTodayString: function() {
        return today.yyyymmdd();
      },
      getTodayDay: function() {
        return today.getDate();
      },
      getTodayMonthString: function() {
        return today.yyyymm();
      },
      daysInMonth: function(m, y) {
        return new Date(year, month + 1, 0).getDate();
      },
      nextMonthString: function(date) {
        return (new Date(date.setMonth(date.getMonth() + 1))).yyyymm();
      },
      prevMonthString: function(date) {
        return (new Date(date.setMonth(date.getMonth() - 1))).yyyymm();
      }
    };
  }
]);

},{}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('core').factory("DateService", [
    function() {
      var date_to_show, today;
      today = new Date();
      date_to_show = new Date();
      return {
        getTodayISO: function() {
          return today;
        },
        getTodayString: function() {
          return today.yyyymmdd();
        },
        getTodayDay: function() {
          return today.getDate();
        },
        getTodayMonthString: function() {
          return today.yyyymm();
        },
        daysInMonth: function(m, y) {
          return new Date(year, month + 1, 0).getDate();
        },
        nextMonthString: function(date) {
          return (new Date(date.setMonth(date.getMonth() + 1))).yyyymm();
        },
        prevMonthString: function(date) {
          return (new Date(date.setMonth(date.getMonth() - 1))).yyyymm();
        }
      };
    }
  ]);

}).call(this);



},{}],20:[function(require,module,exports){
'use strict';

//Menu service used for managing  menus
angular.module('core').service('Menus', [

	function() {
		// Define a set of default roles
		this.defaultRoles = ['*'];

		// Define the menus object
		this.menus = {};

		// A private function for rendering decision 
		var shouldRender = function(user) {
			if (user) {
				if (!!~this.roles.indexOf('*')) {
					return true;
				} else {
					for (var userRoleIndex in user.roles) {
						for (var roleIndex in this.roles) {
							if (this.roles[roleIndex] === user.roles[userRoleIndex]) {
								return true;
							}
						}
					}
				}
			} else {
				return this.isPublic;
			}

			return false;
		};

		// Validate menu existance
		this.validateMenuExistance = function(menuId) {
			if (menuId && menuId.length) {
				if (this.menus[menuId]) {
					return true;
				} else {
					throw new Error('Menu does not exists');
				}
			} else {
				throw new Error('MenuId was not provided');
			}

			return false;
		};

		// Get the menu object by menu id
		this.getMenu = function(menuId) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Return the menu object
			return this.menus[menuId];
		};

		// Add new menu object by menu id
		this.addMenu = function(menuId, isPublic, roles) {
			// Create the new menu
			this.menus[menuId] = {
				isPublic: isPublic || false,
				roles: roles || this.defaultRoles,
				items: [],
				shouldRender: shouldRender
			};

			// Return the menu object
			return this.menus[menuId];
		};

		// Remove existing menu object by menu id
		this.removeMenu = function(menuId) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Return the menu object
			delete this.menus[menuId];
		};

		// Add menu item object
		this.addMenuItem = function(menuId, menuItemTitle, menuItemURL, menuItemType, menuItemUIRoute, isPublic, roles, position) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Push new menu item
			this.menus[menuId].items.push({
				title: menuItemTitle,
				link: menuItemURL,
				menuItemType: menuItemType || 'item',
				menuItemClass: menuItemType,
				uiRoute: menuItemUIRoute || ('/' + menuItemURL),
				isPublic: ((isPublic === null || typeof isPublic === 'undefined') ? this.menus[menuId].isPublic : isPublic),
				roles: ((roles === null || typeof roles === 'undefined') ? this.menus[menuId].roles : roles),
				position: position || 0,
				items: [],
				shouldRender: shouldRender
			});

			// Return the menu object
			return this.menus[menuId];
		};

		// Add submenu item object
		this.addSubMenuItem = function(menuId, rootMenuItemURL, menuItemTitle, menuItemURL, menuItemUIRoute, isPublic, roles, position) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Search for menu item
			for (var itemIndex in this.menus[menuId].items) {
				if (this.menus[menuId].items[itemIndex].link === rootMenuItemURL) {
					// Push new submenu item
					this.menus[menuId].items[itemIndex].items.push({
						title: menuItemTitle,
						link: menuItemURL,
						uiRoute: menuItemUIRoute || ('/' + menuItemURL),
						isPublic: ((isPublic === null || typeof isPublic === 'undefined') ? this.menus[menuId].items[itemIndex].isPublic : isPublic),
						roles: ((roles === null || typeof roles === 'undefined') ? this.menus[menuId].items[itemIndex].roles : roles),
						position: position || 0,
						shouldRender: shouldRender
					});
				}
			}

			// Return the menu object
			return this.menus[menuId];
		};

		// Remove existing menu object by menu id
		this.removeMenuItem = function(menuId, menuItemURL) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Search for menu item to remove
			for (var itemIndex in this.menus[menuId].items) {
				if (this.menus[menuId].items[itemIndex].link === menuItemURL) {
					this.menus[menuId].items.splice(itemIndex, 1);
				}
			}

			// Return the menu object
			return this.menus[menuId];
		};

		// Remove existing menu object by menu id
		this.removeSubMenuItem = function(menuId, submenuItemURL) {
			// Validate that the menu exists
			this.validateMenuExistance(menuId);

			// Search for menu item to remove
			for (var itemIndex in this.menus[menuId].items) {
				for (var subitemIndex in this.menus[menuId].items[itemIndex].items) {
					if (this.menus[menuId].items[itemIndex].items[subitemIndex].link === submenuItemURL) {
						this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1);
					}
				}
			}

			// Return the menu object
			return this.menus[menuId];
		};

		//Adding the topbar menu
		this.addMenu('topbar');
	}
]);
},{}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('core').factory("TimelineService", [
    'WebApiService', function(WebApiService) {
      var day, timeline, timelineCache;
      timeline = [];
      day = (new Date()).getDate();
      timelineCache = [];
      return {
        getTimeline: function(dateString) {
          if (timelineCache[dateString]) {
            return timelineCache[dateString];
          } else {
            timeline = WebApiService.getTimeline(dateString);
            timelineCache[dateString] = timeline;
            return timeline;
          }
        },
        getDay: function() {
          return day;
        },
        setDay: function(d) {
          if (typeof d === 'number' && d > 0 && d < 30) {
            return day = d;
          } else {
            throw new Error('Day is not appropriate');
          }
        },
        setCounterValue: function(value) {
          if (day) {
            return timeline[day].counter = value;
          }
        }
      };
    }
  ]);

}).call(this);



},{}],22:[function(require,module,exports){
'use strict';

// Config HTTP Error Handling
angular.module('users').config(['$httpProvider',
	function($httpProvider) {
		// Set the httpProvider "not authorized" interceptor
		$httpProvider.interceptors.push(['$q', '$location', 'Authentication',
			function($q, $location, Authentication) {
				return {
					responseError: function(rejection) {
						switch (rejection.status) {
							case 401:
								// Deauthenticate the global user
								Authentication.user = null;

								// Redirect to signin page
								$location.path('signin');
								break;
							case 403:
								// Add unauthorized behaviour 
								break;
						}

						return $q.reject(rejection);
					}
				};
			}
		]);
	}
]);
},{}],23:[function(require,module,exports){
'use strict';

// Setting up route
angular.module('users').config(['$stateProvider',
	function($stateProvider) {
		// Users state routing
		$stateProvider.
		state('profile', {
			url: '/settings/profile',
			templateUrl: 'modules/users/views/settings/edit-profile.client.view.html'
		}).
		state('password', {
			url: '/settings/password',
			templateUrl: 'modules/users/views/settings/change-password.client.view.html'
		}).
		state('accounts', {
			url: '/settings/accounts',
			templateUrl: 'modules/users/views/settings/social-accounts.client.view.html'
		}).
		state('signup', {
			url: '/signup',
			templateUrl: 'modules/users/views/authentication/signup.client.view.html'
		}).
		state('signin', {
			url: '/signin',
			templateUrl: 'modules/users/views/authentication/signin.client.view.html'
		}).
		state('forgot', {
			url: '/password/forgot',
			templateUrl: 'modules/users/views/password/forgot-password.client.view.html'
		}).
		state('reset-invalid', {
			url: '/password/reset/invalid',
			templateUrl: 'modules/users/views/password/reset-password-invalid.client.view.html'
		}).
		state('reset-success', {
			url: '/password/reset/success',
			templateUrl: 'modules/users/views/password/reset-password-success.client.view.html'
		}).
		state('reset', {
			url: '/password/reset/:token',
			templateUrl: 'modules/users/views/password/reset-password.client.view.html'
		});
	}
]);
},{}],24:[function(require,module,exports){
'use strict';

angular.module('users').controller('AuthenticationController', ['$scope', '$http', '$location', 'Authentication',
	function($scope, $http, $location, Authentication) {
		$scope.authentication = Authentication;

		// If user is signed in then redirect back home
		if ($scope.authentication.user) $location.path('/');

		$scope.signup = function() {
			$http.post('/auth/signup', $scope.credentials).success(function(response) {
				// If successful we assign the response to the global user model
				$scope.authentication.user = response;

				// And redirect to the index page
				$location.path('/');
			}).error(function(response) {
				$scope.error = response.message;
			});
		};

		$scope.signin = function() {
			$http.post('/auth/signin', $scope.credentials).success(function(response) {
				// If successful we assign the response to the global user model
				$scope.authentication.user = response;

				// And redirect to the index page
				$location.path('/');
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);
},{}],25:[function(require,module,exports){
'use strict';

angular.module('users').controller('PasswordController', ['$scope', '$stateParams', '$http', '$location', 'Authentication',
	function($scope, $stateParams, $http, $location, Authentication) {
		$scope.authentication = Authentication;

		//If user is signed in then redirect back home
		if ($scope.authentication.user) $location.path('/');

		// Submit forgotten password account id
		$scope.askForPasswordReset = function() {
			$scope.success = $scope.error = null;

			$http.post('/auth/forgot', $scope.credentials).success(function(response) {
				// Show user success message and clear form
				$scope.credentials = null;
				$scope.success = response.message;

			}).error(function(response) {
				// Show user error message and clear form
				$scope.credentials = null;
				$scope.error = response.message;
			});
		};

		// Change user password
		$scope.resetUserPassword = function() {
			$scope.success = $scope.error = null;

			$http.post('/auth/reset/' + $stateParams.token, $scope.passwordDetails).success(function(response) {
				// If successful show success message and clear form
				$scope.passwordDetails = null;

				// Attach user profile
				Authentication.user = response;

				// And redirect to the index page
				$location.path('/password/reset/success');
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);
},{}],26:[function(require,module,exports){
'use strict';

angular.module('users').controller('SettingsController', ['$scope', '$http', '$location', 'Users', 'Authentication',
	function($scope, $http, $location, Users, Authentication) {
		$scope.user = Authentication.user;

		// If user is not signed in then redirect back home
		if (!$scope.user) $location.path('/');

		// Check if there are additional accounts 
		$scope.hasConnectedAdditionalSocialAccounts = function(provider) {
			for (var i in $scope.user.additionalProvidersData) {
				return true;
			}

			return false;
		};

		// Check if provider is already in use with current user
		$scope.isConnectedSocialAccount = function(provider) {
			return $scope.user.provider === provider || ($scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider]);
		};

		// Remove a user social account
		$scope.removeUserSocialAccount = function(provider) {
			$scope.success = $scope.error = null;

			$http.delete('/users/accounts', {
				params: {
					provider: provider
				}
			}).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.user = Authentication.user = response;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};

		// Update a user profile
		$scope.updateUserProfile = function(isValid) {
			if (isValid) {
				$scope.success = $scope.error = null;
				var user = new Users($scope.user);

				user.$update(function(response) {
					$scope.success = true;
					Authentication.user = response;
				}, function(response) {
					$scope.error = response.data.message;
				});
			} else {
				$scope.submitted = true;
			}
		};

		// Change user password
		$scope.changeUserPassword = function() {
			$scope.success = $scope.error = null;

			$http.post('/users/password', $scope.passwordDetails).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.passwordDetails = null;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);
},{}],27:[function(require,module,exports){
'use strict';

// Authentication service for user variables
angular.module('users').factory('Authentication', [
	function() {
		var _this = this;

		_this._data = {
			user: window.user
		};

		return _this._data;
	}
]);
},{}],28:[function(require,module,exports){
'use strict';

// Users service used for communicating with the users REST endpoint
angular.module('users').factory('Users', ['$resource',
	function($resource) {
		return $resource('users', {}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
},{}],29:[function(require,module,exports){
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('users');
},{}]},{},[2,1,7,29,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]);
